//Map implementation using hashmap in O(1) time complexity




#include<string>
using namespace std;
template <typename v>
class mapnode{
    public:
    string key;
    v value;
    mapnode<v>* next;
    mapnode(string key,v value){
        this->key=key;
        this->value=value;
        next=NULL;
    }
    ~mapnode(){
        delete next;
    }
};
template<typename v>
class ourmap{
    mapnode<v>** buckets;
    int count;
    int numBuckets;
    public:
    ourmap(){
        count=0;
        numBuckets=5;
        buckets=new mapnode<v>*[numBuckets];
        for(int i=0;i<numBuckets;i++){
            buckets[i]=NULL;
        }
    }
    ~ourmap(){
        for(int i=0;i<numBuckets;i++){
            delete buckets[i];
        }
        delete [] buckets;
    }
    int size(){
        return count;
    }
    private:
    int getBUcketIndex(string key){
        int hashcode=0;
        int currentcoeff=1;
        for(int i=key.length()-1;i>=0;i--){
            hashcode+=key[i]*currentcoeff;
            hashcode=hashcode%numBuckets;
            currentcoeff*=37;
            currentcoeff=currentcoeff%numBuckets;
        }
        return hashcode%numBuckets;
    }
    void rehash(){
        mapnode<v>** temp=buckets;
        buckets=new mapnode<v>*[2*numBuckets];
        for(int i=0;i<2*numBuckets;i++){
            buckets[i]=NULL;
        }
        int oldbucketcount=numBuckets;
        numBuckets*=2;
        count=0;
        for(int i=0;i<oldbucketcount;i++){
            mapnode<v>* head=temp[i];
            while(head!=NULL){
                string key=head->key;
                v value=head->value;
                insert(key,value);
                head=head->next;
            }
        }
        for(int i=0;i<oldbucketcount;i++){
            mapnode<v>* head=temp[i];
            delete head;
        }
        delete [] temp;
    }
    public:
    double getlodfactor(){
        return (1.0*count)/numBuckets;
    }
    void insert(string key,int value){
        int bucketIndex=getBUcketIndex(key);
        mapnode<v>* head=buckets[bucketIndex];
        while(head!=NULL){
            if(head->value==value){
                head->value=value;
                return;
            }
            head=head->next;
        }
        head=buckets[bucketIndex];
        mapnode<v>* node=new mapnode<v>(key,value);
        node->next=head;
        buckets[bucketIndex]=node;
        count++; 
        double loadfactor=(1.0*count)/numBuckets;
        if(loadfactor>0.7){
            rehash();
        }
    }
    v getvalue(string key){
        int bucketIndex=getBUcketIndex(key);
        mapnode<v>* head=buckets[bucketIndex];
        while(head!=NULL){
            if(head->key==key){
                return head->value;
            }
            head=head->next;
        }
        return 0;
    }
    v remove(string key){
        int bucketIndex=getBUcketIndex(key);
        mapnode<v>* head=buckets[bucketIndex];
        mapnode<v>* prev=NULL;
        while(head!=nullptr){
            if(head->key==key){
                if(prev==NULL){
                    buckets[bucketIndex]=head->next;
                }
                else{
                    prev->next=head->next;
                }
                v value=head->value;
                head->next=NULL;
                delete head;
                count--;
                return value;
            }
            prev=NULL;
            head=head->next;
        }
        return 0;
    }
};
#include<iostream>
int main(){ 
ourmap<int>map;
for(int i=0;i<10;i++){
   char c='0'+i;
   string key="abc";
   key=key+c;
   int value=i+1;
   map.insert(key,value);
   cout<<map.getlodfactor()<<endl;
}
cout<<map.size()<<endl;
map.remove("abc2");
map.remove("abc7");
cout<<map.size()<<endl;
for(int i=0;i<10;i++){
    char c='0'+i;
    string key="abc";
    key=key+c;
    cout<<key<<":"<<map.getvalue(key)<<endl;
    }
    cout<<map.size()<<endl;
}

 



