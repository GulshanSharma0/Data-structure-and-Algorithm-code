#include<vector>
#include<iostream>
using namespace std;
class priorityQueue {
    vector<int>pq;
    public:
    priorityQueue(){

    }
    bool isEmpty(){
        return pq.size()==0;
    }
    int getSize(){
        return pq.size();
    }
    int getMin(){
        if(isEmpty()){
            return 0;
        }
        return pq[0];
    }
    void insert(int data){
        pq.push_back(data);
        int childIndex = pq.size()-1;
        while(childIndex>0){
            int parentIndex = (childIndex-1)/2;
            if(pq[parentIndex]>pq[childIndex]){
                int temp=pq[parentIndex];
                pq[parentIndex]=pq[childIndex];
                pq[childIndex]=temp;
            }
            else{
                break;
            }
            childIndex=parentIndex;
        }
    }
    int removeMin(){
        int ans=pq[0];
        pq[0]=pq[pq.size()-1];
        pq.pop_back();
        int parentIndex=0;
        int leftChildIndex=2*parentIndex+1;
        int rightChildIndex=2*parentIndex+2;
        while(leftChildIndex<pq.size()){
            int minIndex=parentIndex;
            if(pq[leftChildIndex]<pq[minIndex]){
                minIndex=leftChildIndex;
            }
            if(rightChildIndex<pq.size() && pq[minIndex]>pq[rightChildIndex]){
                minIndex=rightChildIndex;
            }
            if(minIndex==parentIndex){
                break;
            }
            int temp=pq[minIndex];
            pq[minIndex]=pq[parentIndex];
            pq[parentIndex]=temp;
            parentIndex=minIndex;
            leftChildIndex=2*parentIndex+1;
            rightChildIndex=2*parentIndex+2;  
        }
        return ans;
        
    }
};


//max heapify
class priorityQueueMax {
    vector<int>pq;
    public:
    priorityQueueMax(){

    }
    bool isEmpty(){
        return pq.size()==0;
    }
    int getSize(){
        return pq.size();
    }
    int getMax(){
        if(isEmpty()){
            return 0;
        }
        return pq[0];
    }
    void insert(int data){
        pq.push_back(data);
        int childIndex=pq.size()-1;
        while(childIndex>0){
           int parentIndex=(childIndex-1)/2;
           if(pq[parentIndex]<pq[childIndex]){
            int temp=pq[parentIndex];
            pq[parentIndex]=pq[childIndex];
            pq[childIndex]=temp;
           }
           else{
            break;
           }
           childIndex=parentIndex;
        }
    }
    int removeMax(){
        int ans=pq[0];
        pq[0]=pq[pq.size()-1];
        pq.pop_back();
        int parentIndex=0;
        int leftChildIndex=2*parentIndex+1;
        int rightChildIndex=2*parentIndex+2;
        while(leftChildIndex<pq.size()){
            int maxindex=parentIndex;
            if(pq[leftChildIndex]>pq[maxindex]) {
                maxindex = leftChildIndex; 
            }
            if(rightChildIndex<pq.size() && pq[rightChildIndex]>pq[maxindex]){
                maxindex=rightChildIndex;
            }
            int temp=pq[maxindex];
            pq[maxindex]=pq[parentIndex];
            pq[parentIndex]=temp;
            parentIndex=maxindex;
            leftChildIndex=2*parentIndex+1;
            rightChildIndex=2*parentIndex+2;
        }
        return ans;
    }
};
int main(){
    priorityQueueMax p;
    p.insert(10);
    p.insert(100);
    p.insert(1);
    p.insert(20);
    p.insert(18);
    p.insert(15);
    p.insert(35);
    p.insert(5);
    cout<<p.getSize()<<endl;
    cout<<p.getMax()<<endl;
    //cout<<p.getMin()<<endl;
    while(!p.isEmpty()){
        cout<<p.removeMax()<<" ";
    }
    cout<<endl;

}

