/*
*

Chapter Assignment
Problem Statement: Running median
Problem Level: HARD
Problem Description:
You are given a stream of N integers. For every i-th integer added to the running list of integers, print the resulting median.
Print only the integer part of the median.
Input Format :
The first line of input contains an integer N, denoting the number of integers in the stream.

The second line of input contains 'N' integers separated by a single space.

Output Format :
Print the running median for every integer added to the running list on a new line.

Input Constraints
1 <= N <= 10^5
1 <= Ai <= 10^5

Time Limit: 1sec

Sample Input 1 :
6
6 2 1 3 7 5

Sample Output 1 :
6
4
2
2
3
4

Explanation of Sample Output 1 :
S = {6}, median = 6
S = {6, 2} -> {2, 6}, median = 4
S = {6, 2, 1} -> {1, 2, 6}, median = 2
S = {6, 2, 1, 3} -> {1, 2, 3, 6}, median = 2
S = {6, 2, 1, 3, 7} -> {1, 2, 3, 6, 7}, median = 3
S = {6, 2, 1, 3, 7, 5} -> {1, 2, 3, 5, 6, 7}, median = 4

Sample Input 2 :
5
5 4 3 2 1

Sample Output 2 :
5
4
4
3
3


*
*/

#include<iostream>
#include<queue>
using namespace std;
void findRunningMedian(int *vc,int size){
    priority_queue<int>maxi;
    priority_queue<int,vector<int>,greater<int>>mini;
    for(int i=0;i<size;i++){
          if(i==0){
            maxi.push(vc[i]);
          }else{
            if(vc[i]<maxi.top()){
                maxi.push(vc[i]);
            }
            else{
                mini.push(vc[i]);
            }
          }
          if(int(maxi.size()-mini.size())>1){
            int temp=maxi.top();
            maxi.pop();
            mini.push(temp);
          }
          else if(int(mini.size()-maxi.size())>1){
            int temp=mini.top();
            mini.pop();
            maxi.push(temp);
          }
          int c=mini.size()+maxi.size();
          if(c%2==0){
            cout<<(maxi.top()+mini.top())/2<<endl;
          }
          else{
            if(maxi.size()>mini.size()){
                cout<<maxi.top()<<endl;
            }
            else{
                cout<<mini.top()<<endl;
            }
          }
    }
}
int main(){
    int size;
    cin>>size;
    int vc[size];
    for(int i=0;i<size;i++){
        cin>>vc[i];
    }
    findRunningMedian(vc,size);
}
