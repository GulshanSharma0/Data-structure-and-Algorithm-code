
//Longest common subsequence

#include<iostream>
using namespace std;
int LCS(string s,string t){                                 //Bruteforce 
    if(s.size()==0||t.size()==0){
        return 0;
    }
    if(s[0]==t[0]){
        return 1+LCS(s.substr(1),t.substr(1));
    }
    else{
        int a=LCS(s.substr(1),t);
        int b=LCS(s,t.substr(1));
        int c=LCS(s.substr(1),t.substr(1));
        return max(a,max(b,c));
    }
}
int LCS_mem_helper(string s,string t,int **output){
    int m=s.size();
    int n=t.size();
    if(s.size()==0||t.size()==0){
        return 0;
    }
    if(output[m][n]!=-1){
        return output[m][n];
    }
    int ans;
    if(s[0]==t[0]){
        ans=1+LCS_mem_helper(s.substr(1),t.substr(1),output);
    }
    else{
        int a=LCS_mem_helper(s.substr(1),t,output);
        int b=LCS_mem_helper(s,t.substr(1),output);
        int c=LCS_mem_helper(s.substr(1),t.substr(1),output);
        ans=max(a,max(b,c));
    }
    output[m][n]=ans;
    return ans;
}
int LCS_Mem(string s,string t){                                                    //memoization                
    int m=s.length();
    int n=t.length();
     int **output=new int*[m+1];
     for(int i=0;i<m+1;i++){
        output[i]=new int[n+1];
        for(int j=0;j<n+1;j++){
            output[i][j]=-1;
        }
     }
     return LCS_mem_helper(s,t,output);
}
int LCS_DP(string s,string t){                                  //Dynamic Programming
    int m=s.length();
    int n=t.length();
    int **output=new int*[m+1];
    for(int i=0;i<=m;i++){
        output[i]=new int[n+1];
    }
    for(int j=0;j<=n;j++){
        output[0][j]=0;
    }
    for(int i=0;i<=m;i++){
        output[i][0]=0;
    }
    for(int i=1;i<=m;i++){
        for(int j=1;j<=n;j++){
            if(s[m-i]==t[n-j]){
                output[i][j]=1+output[i-1][j-1];
            }
            else{
                int a=output[i-1][j];
                int b=output[i][j-1];
                int c=output[i-1][j-1];
                output[i][j]=max(a,max(b,c));
            }
        }
    }
    return output[m][n];
}
int main(){
    string s;
    string t;
    cin>>s>>t;
    cout<<LCS_DP(s,t);
}
