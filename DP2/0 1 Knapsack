/*
*
Coding Problem
Problem Statement: 0 1 Knapsack
Problem Level: MEDIUM
Problem Description:
A thief robbing a store can carry a maximal weight of W into his knapsack. There are N items, and i-th item weigh 'Wi' and the value being 'Vi.' What would be the maximum value V, that the thief can steal?
Input Format :
The first line of the input contains an integer value N, which denotes the total number of items.

The second line of input contains the N number of weights separated by a single space.

The third line of input contains the N number of values separated by a single space.

The fourth line of the input contains an integer value W, which denotes the maximum weight the thief can steal.

Output Format :
Print the maximum value of V that the thief can steal.

Constraints :
1 <= N <= 20
1<= Wi <= 100
1 <= Vi <= 100

Time Limit: 1 sec

Sample Input 1 :
4
1 2 4 5
5 4 8 6
5

Sample Output 1 :
13

Sample Input 2 :
5
12 7 11 8 9
24 13 23 15 16
26

Sample Output 2 :
51


*
*/






#include<iostream>
using namespace std;
int knapsack(int *wi,int *vi,int n,int w){                                  //brute force
    if(n==0||w==0){
        return 0;
    }
    if(wi[0]>w){
        return knapsack(wi+1,vi+1,n-1,w);
    }
    int a=knapsack(wi+1,vi+1,n-1,w-wi[0])+vi[0];
    int b=knapsack(wi+1,vi+1,n-1,w);
    return max(a,b);
}
int knapsack_mem_helper(int *wi,int *vi,int n,int w,int **output){
     if(n==0||w==0){
        return 0;
    }
    if(output[w][n]!=-1){
        return output[w][n];
    }
    if(wi[n]>w){
        output[w][n] = knapsack(wi+1,vi+1,n-1,w);
    }
    int a=knapsack(wi+1,vi+1,n-1,w-wi[0])+vi[0];
    int b=knapsack(wi+1,vi+1,n-1,w);
    output[w][n]=max(a,b);
    return output[w][n];
}

int knapsack_mem(int *wi,int *vi,int n,int w){                          //memoization and top down 
    int **output=new int*[w+1];
    for(int i=0;i<=w;i++){
        output[i]=new int[n+1];
        for(int j=0;j<=n;j++){
            output[i][j]=-1;
        }
    }
    return knapsack_mem_helper(wi,vi,n,w,output);
}
int knapsack_DP(int *wi,int *vi,int n,int w){                              //Dynamic programing and Buttom up approach
    int **output=new int*[n+1]; 
    for(int i=0;i<=n;i++){
        output[i]=new int[w+1];
    }
    for(int i=0;i<=n;i++){
        for(int j=0;j<=w;j++){
            if(i==0||j==0){
                output[i][j]=0;
            }
            else{
                if(wi[i-1]>j){
                    output[i][j]=output[i-1][j];
                }
                else{
                    output[i][j]=max(output[i-1][j- wi[i-1]]+vi[i-1],output[i-1][j]);
                }
            }
        }
    }
    return output[n][w];
    
}
// Dp another soolution
int knapsack(int* w, int* v, int n, int max_weight)
{
	int* zero = new int[max_weight + 1];
	int* one = new int[max_weight + 1];
	for (int i = 0; i < max_weight + 1; i++)
	{
		zero[i] = 0;
		one[i] = 0;
	}
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= max_weight; j++)
		{
			if (j - w[i - 1] >= 0)
			{
				one[j] = max(zero[j], v[i - 1] + zero[j - w[i - 1]]);
			}
			else
			{
				one[j] = zero[j];
			}
		}

		for (int j = 0; j <= max_weight; j++)
		{
			zero[j] = one[j];
			one[j] = 0;
		}
	}
	return zero[max_weight];
}

int main(){
    int n;
    cin>>n;
    int *wi=new int[n];
    int *vi=new int[n];
    for(int i=0;i<n;i++){
        cin>>wi[i];
    }
    for(int i=0;i<n;i++){
        cin>>vi[i];
    }
    int w;
    cin>>w;
    cout<<knapsack_DP(wi,vi,n,w); 
}
