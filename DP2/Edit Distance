/*
Coding Problem
Problem Statement: Edit Distance
Problem Level: MEDIUM
Problem Description:
You are given two strings S and T of lengths M and N, respectively. Find the 'Edit Distance' between the strings.
Edit Distance of two strings is the minimum number of steps required to make one string equal to the other. In order to do so, you can perform the following three operations:
1. Delete a character
2. Replace a character with another one
3. Insert a character

Note :
Strings don't contain spaces in between.

Input format :
The first line of input contains the string S of length M.

The second line of the input contains the String T of length N.

Output format :
Print the minimum 'Edit Distance' between the strings.

Constraints :
0 <= M <= 10 ^ 3
0 <= N <= 10 ^ 3

Time Limit: 1 sec

Sample Input 1 :
abc
dc

Sample Output 1 :
2

Explanation to the Sample Input 1 :
 In 2 operations we can make string T to look like string S.
First, insert character 'a' to string T, which makes it "adc".

And secondly, replace the character 'd' of string T with 'b' from the string S. This would make string T as "abc" which is also string S.

Hence, the minimum distance.

Sample Input 2 :
whgtdwhgtdg
aswcfg

Sample Output 2 :
9

*
*/




#include<iostream>
using namespace std;
int editDistance(string s,string t){                                                                //Brute force
    if(s.empty()||t.empty()){
        return max(s.size(),t.size());
    }
    if(s[0]==t[0]){
        return editDistance(s.substr(1),t.substr(1));
    }
    else{
        int a=editDistance(s.substr(1),t)+1;
        int b=editDistance(s,t.substr(1))+1;
        int c=editDistance(s.substr(1),t.substr(1))+1;
        return min(a,min(b,c));
    }
}
int editDistance_mem_helper(string s,string t,int **output){                                    //memozation
    int m=s.length();
    int n=t.length();
    if(s.empty()||t.empty()){
        return max(s.size(),t.size());
    }
    if(output[m][n]!=-1){
        return output[m][n];
    }
    int ans;
    if(s[0]==t[0]){
         ans=editDistance_mem_helper(s.substr(1),t.substr(1),output);
    }
    else{
        int a=editDistance_mem_helper(s.substr(1),t,output)+1;
        int b=editDistance_mem_helper(s,t.substr(1),output)+1;
        int c=editDistance_mem_helper(s.substr(1),t.substr(1),output)+1;
        ans= min(a,min(b,c));
    }
    output[m][n]=ans;
    return ans;
}
int editDistance_mem(string s,string t){
    int **output=new int*[s.length()+1];
    for(int i=0;i<=s.length();i++){
        output[i]=new int[t.length()+1];
        for(int j=0;j<=t.length();j++){
            output[i][j]=-1;
        }
    }
    return editDistance_mem_helper(s,t,output);
}
int editDistance_DP(string s,string t){                                                         //dynamic programming
    int m=s.length();
    int n=t.length();
    int **output=new int*[m];
    for(int i=0;i<=m;i++){
        output[i]=new int[n];  
    }
    for(int i=0;i<=m;i++){
        output[i][0]=i;
    }
    for(int j=0;j<=n;j++){
        output[0][j]=j;
    }
    for(int i=1;i<=m;i++){
        for(int j=1;j<=n;j++){
            if(s[m-i]==t[n-j]){
                output[i][j]=output[i-1][j-1];
            }
            else{
                int a=output[i-1][j];
                int b=output[i][j-1];
                int c=output[i-1][j-1];
                output[i][j]=min(a,min(b,c))+1;
            }
        }
    }
    return output[m][n];
}
int main(){
    string s;
    string t;
    cin>>s>>t;
    cout<<editDistance_DP(s,t);
}
