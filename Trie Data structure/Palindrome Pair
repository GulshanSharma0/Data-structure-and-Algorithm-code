/*

Problem Statement: Palindrome Pair
Problem Level: HARD
Problem Description:
Given 'n' number of words, you need to find if there exist any two words which can be joined to make a palindrome or any word, which itself is a palindrome.
The function should return either true or false. You don't have to print anything.
Input Format :
The first line of the test case contains an integer value denoting 'n'.

The following contains 'n' number of words each separated by a single space.

Output Format :
The first and only line of output contains true if the conditions described in the task are met and false otherwise.

Constraints:
Time Limit: 1 sec

Sample Input 1 :
4
abc def ghi cba

Sample Output 1 :
true

Explanation of Sample Input 1:
"abc" and "cba" forms a palindrome

Sample Input 2 :
2
abc def

Sample Output 2 :
false

Explanation of Sample Input 2:
Neither their exists a pair which forms a palindrome, nor any of the words is a palindrome in itself. Hence, the output is 'false.'



*/

@csalgo

Chapter Assignment
Problem Statement: Palindrome Pair
Problem Level: HARD
Problem Description:
Given 'n' number of words, you need to find if there exist any two words which can be joined to make a palindrome or any word, which itself is a palindrome.
The function should return either true or false. You don't have to print anything.
Input Format :
The first line of the test case contains an integer value denoting 'n'.

The following contains 'n' number of words each separated by a single space.

Output Format :
The first and only line of output contains true if the conditions described in the task are met and false otherwise.

Constraints:
Time Limit: 1 sec

Sample Input 1 :
4
abc def ghi cba

Sample Output 1 :
true

Explanation of Sample Input 1:
"abc" and "cba" forms a palindrome

Sample Input 2 :
2
abc def

Sample Output 2 :
false

Explanation of Sample Input 2:
Neither their exists a pair which forms a palindrome, nor any of the words is a palindrome in itself. Hence, the output is 'false.'


*
*/


#include <string>
#include <vector>
#include<algorithm>
using namespace std;
class TrieNode {
	public :
	char data;
	TrieNode **children;
	bool isTerminal;
    int childCount;

	TrieNode(char data) {
		this -> data = data;
		children = new TrieNode*[26];
		for(int i = 0; i < 26; i++) {
			children[i] = NULL;
		}
		isTerminal = false;
        childCount=0;
	}
};

class Trie {
	TrieNode *root;

	public :
	int count;

	Trie() {
		this->count = 0;
		root = new TrieNode('\0');
	}

	bool insertWord(TrieNode *root, string word) {
		// Base case
		if(word.size() == 0) {
			if (!root->isTerminal) {
				root -> isTerminal = true;
				return true;	
			} else {
				return false;
			}
		}

		// Small Calculation
		int index = word[0] - 'a';
		TrieNode *child;
		if(root -> children[index] != NULL) {
			child = root -> children[index];
		}
		else {
			child = new TrieNode(word[0]);
			root -> children[index] = child;
            root->childCount++;
		}

		// Recursive call
		return insertWord(child, word.substr(1));
	}

	// For user
	void insertWord(string word) {
		if (insertWord(root, word)) {
			this->count++;
		}
	}
    bool pallin(string word){
        for(int i=0,j=word.length()-1;j>=i;j--,i++){
            if(word[i]!=word[j]){
                return false;
            }
        }
        return true;
    }
    int getindex(TrieNode *root){
        for(int i=0;i<26;i++){
            if(root->children[i]!=NULL){
                return i;
            }
        }
        return -1; 
    }
    bool check(TrieNode *root,string word){
        if(root->childCount==0){
            if(pallin(word)){
                return true;
            }
        return false;
        }
        int childindex=getindex(root);
        TrieNode *child=root->children[childindex];
        char s=childindex+'a';
        word=word+s;
        return check(child,word);
    }
    bool newsearch(TrieNode *root,string word){
        if(word.size()==0){
            if(root->childCount==0){ 
                return true;
            }
            else{
                return check(root,"");
            }
        }
       int index=word[0]-'a';
       TrieNode *child;
       if(root->children[index]!=NULL){
            child=root->children[index];
       }else{
        return false;
       }
       return newsearch(child,word.substr(1));
    }
    bool search(vector<string>vc){
        for(int i=0;i<vc.size();i++){
            string st=vc[i];
            string reverse="";
            for(int j=st.length()-1;j>=0;j--){
                reverse=reverse+st[j];
            }
            if(newsearch(root,reverse)){
                return true;
            }
            else{
                false;
            }
        }
    }
    bool findIfPallindronePair(vector<string>vc,int size){
        for(int i=0;i<size;i++){
            insertWord(vc[i]);
        }
        return search(vc);
    }
};

#include<iostream>
using namespace std;
int main(){
    int size;
    cin>>size;
    vector<string>vcs(size);
    for(int i=0;i<size;i++){
        cin>>vcs[i];
    }
    Trie t;
    cout<<t.findIfPallindronePair(vcs,size);



}
