/*
*
Coding Problem
Problem Statement: Check BST
Problem Level: MEDIUM
Problem Description:
Given a binary tree with N number of nodes, check if that input tree is BST (Binary Search Tree) or not. If yes, return true, return false otherwise.
Duplicate elements should be in right subtree.
Input format :
Line 1 : Nodes in level order form (separated by space). If any node does not have left or right child, take -1 in its place

Output format :
true or false

Constraints :
1 <= N <= 10^5

Sample Input 1 :
3 1 5 -1 2 -1 -1 -1 -1

Sample Output 1 :
true

Sample Input 2 :
5 2 10 0 1 -1 15 -1 -1 -1 -1 -1 -1

Sample Output 2 :
false
*
*/

#include<iostream>
#include<climits>
using namespace std; 
#include<queue>
#include<vector>
#include<stack>
template<typename T>
class BinaryTree{
public:
    T data;
    BinaryTree* left;
    BinaryTree* right;
    BinaryTree(T data){
        this->data=data;
        left=nullptr;
        right=nullptr;
    }
    ~BinaryTree(){
        delete left;
        delete right;
    }
};
BinaryTree<int>* takeinputlevelwise() {
     int rootdata;
     cout<<"Enter rootData"<<endl;
     cin>>rootdata;
     if(rootdata==-1){
        return nullptr;
     }
     BinaryTree<int>* root=new BinaryTree<int>(rootdata);
     queue<BinaryTree<int>*>pendingnodes;
     pendingnodes.push(root);
     while(pendingnodes.size()!=0){
        BinaryTree<int>* front=pendingnodes.front();
        pendingnodes.pop();
        cout<<"Enter Left child of "<<front->data<<endl;
        int leftchilddata;
        cin>>leftchilddata;
        if(leftchilddata!=-1){ 
            BinaryTree<int>* child=new BinaryTree<int>(leftchilddata);
            front->left=child;
            pendingnodes.push(child);
        }
        cout<<"Enter right child of "<<front->data<<endl;
        int rightchilddata;
        cin>>rightchilddata;
        if(rightchilddata!=-1){ 
            BinaryTree<int>* child=new BinaryTree<int>(rightchilddata);
            front->right=child;
            pendingnodes.push(child);
        }
     }
     return root;
}


int maximum(BinaryTree<int>* root){                                                                         
    if(root==nullptr){
        return INT16_MIN;
    }
    return max(root->data,max(maximum(root->left),maximum(root->right)));
}
int minimum(BinaryTree<int>* root){
    if(root==nullptr){
        return INT_MAX;
    }
    return min(root->data,min(minimum(root->left),minimum(root->right)));
}
bool isBST(BinaryTree<int>* root){                                          //The Time complexity of this function is O(nh) or O(n^2)
    if(root==nullptr){
        return true;
    }
        int leftmax=maximum(root->left);
        int rightmin=minimum(root->right);
        bool output=(root->data>leftmax && root->data<=rightmin && isBST(root->left) && isBST(root->right));
        return output;
    
}
class isBSTReturn{
    public:
    bool isBST;
    int minimum;
    int maximum;
};
isBSTReturn isBST2(BinaryTree<int>* root){                        //The time complexity of this function is O(n);
    if(root==nullptr){
        isBSTReturn output;
        output.isBST=true;
        output.minimum=INT_MAX;
        output.maximum=INT_MIN;
        return output;
    }
    isBSTReturn leftOutput=isBST2(root->left);
    isBSTReturn rightOutput=isBST2(root->right);
    int minimum=min(root->data,min(leftOutput.minimum,rightOutput.minimum));
    int maximum=max(root->data,max(leftOutput.maximum,rightOutput.maximum));
    bool isBSTfinal=(root->data>=leftOutput.maximum)&&(root->data<=rightOutput.minimum)&&(leftOutput.isBST&&rightOutput.isBST);
    isBSTReturn output;
    output.minimum=minimum;
    output.maximum=maximum;
    output.isBST=isBSTfinal;
    return output;
}

bool isBST3(BinaryTree<int>* root,int min=INT_MIN,int max=INT_MAX){                 //The time complexity of this function is O(n);
    if(root==nullptr){
        return true;
    }
    if(root->data<min||root->data>max){
        return false;
    }
    bool isLeftOk=isBST3(root->left,min,root->data-1);
    bool isRightOk=isBST3(root->right,root->data,max);
    return isLeftOk && isRightOk;
}
int main(){
    BinaryTree<int>* root=takeinputlevelwise();
    cout<<isBST(root)<<endl;
    isBSTReturn ans=isBST2(root);
    cout<<ans.isBST<<endl;
    cout<<isBST3(root)<<endl;
    delete root; 
}
