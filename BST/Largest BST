/*
*

Chapter Assignment
Problem Statement: Largest BST
Problem Level: HARD
Problem Description:
Given a Binary tree, find the largest BST subtree. That is, you need to find the BST with maximum height in the given binary tree.
You have to return the height of largest BST.
Input format :
The first line of input contains data of the nodes of the tree in level order form. The data of the nodes of the tree is separated by space.
If any node does not have left or right child, take -1 in its place. Since -1 is used as an indication whether the left or right nodes exist,
therefore, it will not be a part of the data of any node.

Output format:
The first and only line of output contains the height of the largest BST.

Constraints:
Time Limit: 1 second

Sample Input 1:
5 10 6 2 3 -1 -1 -1 -1 -1 9 -1 -1

Sample Output 1:
2


*
*/


#include<iostream>
#include<queue>
#include<vector>
#include<algorithm>
#include<climits>
using namespace std;
template<typename T>
class BinaryTree{
public:
    T data;
    BinaryTree* left;
    BinaryTree* right;
    BinaryTree(T data){
        this->data=data;
        left=nullptr;
        right=nullptr;
    }
    ~BinaryTree(){
        delete left;
        delete right;
    }
};
BinaryTree<int>* takeinputlevelwise() {
     int rootdata;
     cout<<"Enter rootData"<<endl;
     cin>>rootdata;
     if(rootdata==-1){
        return nullptr;
     }
     BinaryTree<int>* root=new BinaryTree<int>(rootdata);
     queue<BinaryTree<int>*>pendingnodes;
     pendingnodes.push(root);
     while(pendingnodes.size()!=0){
        BinaryTree<int>* front=pendingnodes.front();
        pendingnodes.pop();
        cout<<"Enter Left child of "<<front->data<<endl;
        int leftchilddata;
        cin>>leftchilddata;
        if(leftchilddata!=-1){ 
            BinaryTree<int>* child=new BinaryTree<int>(leftchilddata);
            front->left=child;
            pendingnodes.push(child);
        }
        cout<<"Enter right child of "<<front->data<<endl;
        int rightchilddata;
        cin>>rightchilddata;
        if(rightchilddata!=-1){ 
            BinaryTree<int>* child=new BinaryTree<int>(rightchilddata);
            front->right=child;
            pendingnodes.push(child);
        }
     }
     return root;
}
bool isBST(BinaryTree<int>* root,int min=INT_MIN,int max=INT_MAX){
    if(root==nullptr){
        return true;
    }
    if(root->data<min||root->data>max){
        return false;
    }
    bool isleftOk=isBST(root->left,min,root->data-1);
    bool isrightOk=isBST(root->right,root->data,max);
    return isleftOk && isrightOk;
    
}
int hight(BinaryTree<int>* root){
    if(root==nullptr){
        return 0;
    }
    return 1+max(hight(root->left),hight(root->right));
}
int largestBST(BinaryTree<int>* root){
    if(root==nullptr)
        return 0;
    if(isBST(root)){
        return hight(root);
    }
    else{
        int a=largestBST(root->left);
        int b=largestBST(root->right);
        return max(a,b);
    }
}
class Pair{
    public:
    int minimum;
    int maximum;
    bool isBST;
    int hight;
};
Pair findLargestBST(BinaryTree<int>* root){
    if(root==nullptr){
        Pair p;
        p.minimum=INT_MAX;
        p.maximum=INT_MIN;
        p.isBST=true;
        p.hight=0;
        return p;
    }
    Pair left=findLargestBST(root->left);
    Pair right=findLargestBST(root->right);
    
    int minimum=min(root->data,min(left.minimum,right.minimum)); 
    int maximum=max(root->data,max(left.maximum,right.maximum));
    bool isBSTfinal=(root->data>left.maximum) && (root->data<right.minimum) && left.isBST && right.isBST;
    Pair obj;
    obj.maximum=maximum;
    obj.minimum=minimum;
    obj.isBST=isBSTfinal;
    if(isBSTfinal){
        obj.hight=1+max(left.hight,right.hight);
    }
    else{
        obj.hight=max(left.hight,right.hight);
    }
    return obj;
    
}
int main(){
    BinaryTree<int>* root=takeinputlevelwise();
    Pair a=findLargestBST(root);
    cout<<a.hight<<endl;
    delete root;
    return 0;
}
