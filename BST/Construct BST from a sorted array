/*
*
Coding Problem
Problem Statement: Construct BST
Problem Level: EASY
Problem Description:
Given a sorted integer array A of size n, which contains all unique elements. You need to construct a balanced BST from this input array. Return the root of constructed BST.
Note: If array size is even, take first mid as root.
Input format:
The first line of input contains an integer, which denotes the value of n. The following line contains n space separated integers, that denote the values of array.

Output Format:
The first and only line of output contains values of BST nodes, printed in pre order traversal.

Constraints:
Time Limit: 1 second

Sample Input 1:
7
1 2 3 4 5 6 7

Sample Output 1:
4 2 1 3 6 5 7

*/

#include<iostream>
#include<climits>
using namespace std; 
#include<queue>
#include<vector>
#include<stack>
template<typename T>
class BinaryTree{
public:
    T data;
    BinaryTree* left;
    BinaryTree* right;
    BinaryTree(T data){
        this->data=data;
        left=nullptr;
        right=nullptr;
    }
    ~BinaryTree(){
        delete left;
        delete right;
    }
};

void printPreOrder(BinaryTree<int>* root){
    if(root==nullptr){
        return;
    }
    cout<<root->data<<" ";
    printPreOrder(root->left);
    printPreOrder(root->right); 
}
BinaryTree<int>* constructBST(int *arr,int si,int ei){
   
    if(si>ei){
        return NULL;
    }
    int mid=si+(ei-si)/2;
     BinaryTree<int>* root=new BinaryTree<int>(arr[mid]);
    root->left=constructBST(arr,si,mid-1);
    root->right=constructBST(arr,mid+1,ei);
    return root;
    
}
int main(){
    //BinaryTree<int>* root=takeinputlevelwise();
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    BinaryTree<int>* root=constructBST(arr,0,n-1);
    printPreOrder(root);
    delete root;  
}
