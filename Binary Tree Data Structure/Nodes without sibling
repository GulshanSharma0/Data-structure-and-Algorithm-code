/*
*

Chapter Assignment
Problem Statement: Nodes without sibling
Problem Level: EASY
Problem Description:
For a given Binary Tree of type integer, print all the nodes without any siblings.
Input Format:
The first and the only line of input will contain the node data, all separated by a single space. Since -1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data.

Output Format:
The only line of output prints the node data in a top to down fashion with reference to the root. 
Node data in the left subtree will be printed first and then the right subtree.
A single space will separate them all.

Constraints:
1 <= N <= 10^5
Where N is the total number of nodes in the binary tree.

Time Limit: 1 second

Sample Input 1:
5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1

*
**/

/*template<typename T>
class BinaryTree{
public:
    T data;
    BinaryTree* left;
    BinaryTree* right;
    BinaryTree(T data){
        this->data=data;
        left=nullptr;
        right=nullptr;
    }
    ~BinaryTree(){
        delete left;
        delete right;
    }
};*/

void printNodeWithoutSiblings(BinaryTree<int>* root){
    if(root==nullptr){
        return;
    }
    if(root->right!=nullptr && root->left==nullptr){
        cout<<root->right->data<<" ";
        printNodeWithoutSiblings(root->right);
    }
    else if(root->right==nullptr && root->left!=nullptr){
        cout<<root->left->data<<" ";
        printNodeWithoutSiblings(root->left);
    } 
    else{ 
    printNodeWithoutSiblings(root->left);
    printNodeWithoutSiblings(root->right);
    }
}
