/**
*


Chapter Assignment
Problem Statement: Sum Of Nodes
Problem Level: EASY
Problem Description:
For a given Binary Tree of integers, find and return the sum of all the nodes data.
Example:
                        10
                      /      \
                    20      30
                   /    \
                 40    50

When we sum up all the nodes data together, [10, 20, 30, 40 50] we get 150. Hence, the output will be 150.

Input Format:
The first and the only line of input will contain the nodes data, all separated by a single space. Since -1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data.

Output Format:
The first and the only line of output prints the sum of all the nodes data present in the binary tree.

Note:
You are not required to print anything explicitly. It has already been taken care of.

Constraints:
1 <= N <= 10^6
Where N is the total number of nodes in the binary tree.

Time Limit: 1 sec

Sample Input 1:
2 3 4 6 -1 -1 -1 -1 -1

Sample Output 1:
 15

Sample Input 2:
1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1

Sample Output 2:
 28

Find Sum of all Nodes
**
***/



/*template<typename T>
class BinaryTree{
public:
    T data;
    BinaryTree* left;
    BinaryTree* right;
    BinaryTree(T data){
        this->data=data;
        left=nullptr;
        right=nullptr;
    }
    ~BinaryTree(){
        delete left;
        delete right;
    }
};*/


#include<iostream>
using namespace std;
#include "BinaryTreeclass.cpp"
#include<queue>
BinaryTree<int>* takeinputlevelwise() {
     int rootdata;
     cout<<"Enter rootData"<<endl;
     cin>>rootdata;
     if(rootdata==-1){
        return nullptr;
     }
     BinaryTree<int>* root=new BinaryTree<int>(rootdata);
     queue<BinaryTree<int>*>pendingnodes;
     pendingnodes.push(root);
     while(pendingnodes.size()!=0){
        BinaryTree<int>* front=pendingnodes.front();
        pendingnodes.pop();
        cout<<"Enter Left child of "<<front->data<<endl;
        int leftchilddata;
        cin>>leftchilddata;
        if(leftchilddata!=-1){ 
            BinaryTree<int>* child=new BinaryTree<int>(leftchilddata);
            front->left=child;
            pendingnodes.push(child);
        }
        cout<<"Enter right child of "<<front->data<<endl;
        int rightchilddata;
        cin>>rightchilddata;
        if(rightchilddata!=-1){ 
            BinaryTree<int>* child=new BinaryTree<int>(rightchilddata);
            front->right=child;
            pendingnodes.push(child);
        }
     }
     return root;
}
int main(){
   BinaryTree<int>* root=takeinputlevelwise();
   int ans=findSumOfAllNode(root);
   cout<<ans<<endl;
   delete root;
}
