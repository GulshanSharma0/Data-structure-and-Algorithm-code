//Check balanced Tree or not
/*

Chapter Assignment
Problem Statement:  Balanced
Problem Level: MEDIUM
Problem Description:
Given a binary tree, check if its balanced i.e. depth of left and right subtrees of every node differ by at max 1. Return true if given binary tree is balanced, false otherwise.
Input format :
Elements in level order form (separated by space). If any node does not have left or right child, take -1 in its place.

Sample Input 1 :
5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1

Sample Output 1 :
false

Sample Input 2 :
1 2 3 -1 -1 -1 -1

Sample Output 2 :
true

*/
/*
template<typename T>
class BinaryTree{
public:
    T data;
    BinaryTree* left;
    BinaryTree* right;
    BinaryTree(T data){
        this->data=data;
        left=nullptr;
        right=nullptr;
    }
    ~BinaryTree(){
        delete left;
        delete right;
    }
};*/
#include<iostream>
using namespace std;
#include "BinaryTreeclass.cpp"
#include<queue>
void PrintBinaryTreeLevelWise(BinaryTree<int>* root){                               // Print Binary Tree Levelwise
    if(root==nullptr){
        return;
    }
    queue<BinaryTree<int>*>pendingnodes;
    pendingnodes.push(root);
    while(pendingnodes.size()!=0){
        BinaryTree<int>* front=pendingnodes.front();
        pendingnodes.pop();
        cout<<front->data<<":";
        if(front->left!=nullptr){
            cout<<"L"<<front->left->data;
            pendingnodes.push(front->left);
        }
        if(front->right!=nullptr){
            cout<<"R"<<front->right->data;
            pendingnodes.push(front->right);
        }
        cout<<endl;
    }
}

BinaryTree<int>* takeinputlevelwise() {                                          // for Tale input Levelwise
     int rootdata;
     cout<<"Enter rootData"<<endl;
     cin>>rootdata;
     if(rootdata==-1){
        return nullptr;
     }
     BinaryTree<int>* root=new BinaryTree<int>(rootdata);
     queue<BinaryTree<int>*>pendingnodes;
     pendingnodes.push(root);
     while(pendingnodes.size()!=0){
        BinaryTree<int>* front=pendingnodes.front();
        pendingnodes.pop();
        cout<<"Enter Left child of "<<front->data<<endl;
        int leftchilddata;
        cin>>leftchilddata;
        if(leftchilddata!=-1){ 
            BinaryTree<int>* child=new BinaryTree<int>(leftchilddata);
            front->left=child;
            pendingnodes.push(child);
        }
        cout<<"Enter right child of "<<front->data<<endl;
        int rightchilddata;
        cin>>rightchilddata;
        if(rightchilddata!=-1){ 
            BinaryTree<int>* child=new BinaryTree<int>(rightchilddata);
            front->right=child;
            pendingnodes.push(child);
        }
     }
     return root;
}

/**
int Hight(BinaryTree<int>* root){
    if(root==nullptr){
        return 0;
    }
    return 1+max(Hight(root->left),Hight(root->right));
}


bool checkBalancedBinaryTree(BinaryTree<int>* root){       //This function for check Balanced Tree But this functions takes more Timecomplexity ->O(n*HT);
    if(root==nullptr){
        return true;
    }
    int hight=abs(Hight(root->left)-Hight(root->right));
    if(hight>1){
        return false;
    }
    bool a=checkBalancedBinaryTree(root->left);
    bool b=checkBalancedBinaryTree(root->right);
    return a&&b;
}
*
**/

pair<bool,int> IsBalanceBinaryTree(BinaryTree<int>* root){            //The Timecomplexity of this function is O(N);
    if(root==nullptr){
        pair<bool,int>ans;
        ans.first=true;
        ans.second=0;
        return ans;       
    }
    pair<bool,int> leftcheck=IsBalanceBinaryTree(root->left);
    pair<bool,int> rightcheck=IsBalanceBinaryTree(root->right);
    bool lc=leftcheck.first;
    bool rc=rightcheck.first;
    int lh=leftcheck.second;
    int rh=rightcheck.second;
    pair<bool,int> ans;
    if(lc==false||rc==false){
        ans.first=false;
        ans.second=1+max(lh,rh);
        return ans;
    }
    if(lc==true&&rc==true){
        if(abs(lh-rh)<=1){
            ans.first=true;
            ans.second=1+max(lh,rh);
            return ans;
        }
        else{
            ans.first=false;
            ans.second=1+max(lh,rh);
            return ans;
        }
    }
}


int main(){
 BinaryTree<int>* root=takeinputlevelwise();
   PrintBinaryTreeLevelWise(root);
   pair<bool,int> ans=IsBalanceBinaryTree(root);
   cout<<ans.first<<endl;
   delete root;
}
