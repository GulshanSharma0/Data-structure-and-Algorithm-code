
Coding Problem
Problem Statement: Reverse LL (Iterative) 
Problem Level: EASY
Problem Description:
Given a linked list, reverse it iteratively.
You don't need to print the elements, just reverse the LL duplicates and return the head of updated LL.
`Input format : Linked list elements (separated by space and terminated by -1)``

Sample Input 1 :
1 2 3 4 5 -1

Sample Output 1 :
5 4 3 2 1
*/


class node {
public:
    int data;
    node *next;

    node(int data)
    {
        this->data=data;
        next=nullptr;
    }
};



node* reverselinklist_iterative(node* head)
{
    node* prev=NULL;
    node* curr=head;
    node* next;
    while(curr!=NULL)
    {
        next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
    }
    return prev;
}


node* takeinput()
{
    int data;
    cin>>data;
    node* head=NULL;
    node* tail=NULL;
    while(data!=-1)
    {
        node* newnode=new node(data);
        if(head==NULL)
        {
            head=newnode;
            tail=newnode;
        }
        else{
            tail->next=newnode;
            tail=newnode;
        }
        cin>>data;
    }
    return head;
}
void print(node* head)
{
    node* temp=head;
    while(temp!=NULL)
    {

        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<endl;
}
int main()
{
    node* head=takeinput();
    print(head);
    node* ans = reverselinklist_iterative(head);
    print(ans);

}
