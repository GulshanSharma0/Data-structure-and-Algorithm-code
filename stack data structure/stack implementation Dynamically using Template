
#include<climits>

template<typename T>

class stackusingarrays{
    T *data;
    int nextindex;
    int capicity;
public:
    stackusingarrays() {
        data=new T[4];
        nextindex=0;
        capicity=4;
    }
    int size(){
    return nextindex;
    }
    bool isempty(){
    /*if(nextindex==0)
    {
        rreturn true;
    }else{
    return false;
    }*/
    return nextindex==0;
    }
    void push(T element) {
        if(nextindex==capicity) {
            T *newData= new T[2*capicity];
            for(int i=0;i<capicity;i++)
            {
                newData[i] = data[i];
            }
            capicity*=2;
            delete [] data;
            data=newData;
       }
       data[nextindex]=element;
       nextindex++;
    }

    T pop(){
        if(isempty())
        {
            return 0;
        }
        nextindex--;
        return data[nextindex];
    }
    T top()
    {
        if(isempty())
        {
            return 0;
        }
        return data[nextindex-1];
    }
};



#include<iostream>
#include "stack_implementation_using_arrays.cpp"
using namespace std;
int main()
{
     stackusingarrays<char>s;
     s.push(100);
     s.push(102);
     s.push(103);
     s.push(104);
     s.push(105);

     cout<<s.top()<<endl;
     cout<<s.size()<<endl;
     cout<<s.pop()<<endl;
     cout<<s.pop()<<endl;
     cout<<s.pop()<<endl;
     cout<<s.isempty()<<endl;
     return 0;


}
