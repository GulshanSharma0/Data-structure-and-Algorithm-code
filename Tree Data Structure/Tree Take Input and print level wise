//take input and print Tree level wise




#include<vector>
using namespace std;
template <typename T>
class TreeNode{
    public:
        T data;
        vector<TreeNode<T>*> children;
        TreeNode<T> (T data){
            this->data=data;
        }
};




#include<iostream>
#include<queue>
using namespace std;
#include "TreeNode.cpp"
TreeNode<int>* takeInputLevelWise() {
    int rootdata;
    cout<<"Enter root data"<<endl;
    cin>>rootdata;
    TreeNode<int>* root = new TreeNode<int>(rootdata);
    queue<TreeNode<int>*> pendingNodes;
    pendingNodes.push(root);
    while(pendingNodes.size()!=0) {
        TreeNode<int>* front= pendingNodes.front();
        pendingNodes.pop();
        cout<<"Enter Num of children of "<<front->data<<endl;
        int numchild;
        cin>>numchild;
        for(int i=0;i<numchild;i++) {
             int childData;
             cout<<"Enter "<<i<<"th child of "<<front->data<<endl;
             cin>>childData;
             TreeNode<int>* child=new TreeNode<int>(childData);
             front->children.push_back(child);
             pendingNodes.push(child);
        }
    }
    return root;

}
void printTreeLevelWise(TreeNode<int>* root) {
    queue<TreeNode<int>*> pendingNodes;
    pendingNodes.push(root);
    while(pendingNodes.size()!=0){
        TreeNode<int>* front=pendingNodes.front();
        pendingNodes.pop();
        cout<<front->data<<":";
        for(int i=0;i<front->children.size();i++){
            cout<<front->children[i]->data<<",";
            pendingNodes.push(front->children[i]);
        }
        cout<<endl;
    }
}
int main() {
    TreeNode<int>* root=takeInputLevelWise();
    printTreeLevelWise(root);

}
